pekko {
  loglevel = "INFO"
  loggers = ["org.apache.pekko.event.Logging$DefaultLogger"]
  logging-filter = "org.apache.pekko.event.DefaultLoggingFilter"

  test {
    timefactor = 15.0
  }
}

stasis {
  client {
    analysis {
      checksum = "crc32"
    }

    api {
      type = "http"

      http {
        interface = "localhost"
        port = 29090

        context {
          type = "server"
          protocol = "TLS"

          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      init {
        interface = "localhost"
        port = 39190

        context {
          enabled = false

          type = "server"
          protocol = "TLS"

          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      authentication {
        token-size = 16
      }
    }

    compression {
      default = "gzip"

      disabled-extensions {
        media = "ai,aif,avi,bmp,flac,gif,jpeg,jpg,mid,midi,mka,mkv,mov,mp3,mp4,mpeg,mpeg2,mpeg4,mpg,mpg2,mpg4,ogg,png,psd,svg,tif,vob,wav,weba,webm,wmv"
        compressed = "7z,b1,deb,gz,gzip,lz,pkg,rar,rpm,taz,tbz,tgz,xz,zip"

        default = ${stasis.client.compression.disabled-extensions.media}","${stasis.client.compression.disabled-extensions.compressed}

        additional = ""

        list = ${stasis.client.compression.disabled-extensions.default}","${stasis.client.compression.disabled-extensions.additional}
      }
    }

    ops {
      backup {
        rules-files = "client.rules"
        max-chunk-size = 8K
        max-part-size = 16K
      }

      scheduling {
        schedules-file = "client.schedules"
        min-delay = 30 seconds
        max-extra-delay = 5 minutes
      }

      monitoring {
        initial-delay = 10 seconds
        interval = 1 minute
      }
    }

    server {
      authentication {
        token-endpoint = "http://localhost:9090/oauth/token"
        client-id = "0900154d-b05d-4e71-93e1-a678b863f1bd"
        client-secret = "test-secret"
        expiration-tolerance = 30 seconds
        use-query-string = true

        scopes {
          api = "api-scope"
          core = "core-scope"
        }

        context {
          enabled = false
        }
      }

      api {
        url = "http://localhost:19090"
        user = "3256119f-068c-4c17-9184-2ec46f48ca54"
        user-salt = "test-salt"
        device = "bc3b2b9a-3d04-4c8c-a6bb-b4ee428d1a99"

        request-buffer-size = 100

        cache {
          initial-capacity = 10
          maximum-capacity = 1000
          time-to-live = 90 seconds
          tile-to-idle = 30 seconds
        }

        context {
          enabled = false
        }
      }

      core {
        address = "http://localhost:19091"
        node-id = "31f7c5b1-3d47-4731-8c2b-19f6416eb2e3"

        request-buffer-size = 100
        max-chunk-size = 8192

        context {
          enabled = false
        }
      }
    }

    staging {
      store-directory = "/tmp"
      files {
        prefix = "test-prefix"
        suffix = "test-suffix"
      }
    }
  }

  test {
    client {
      service {
        telemetry {
          metrics-disabled {
            enabled = false
            interface = "localhost"
            port = 19092
          }

          metrics-enabled {
            enabled = true
            interface = "localhost"
            port = 19092
          }
        }
      }

      security {
        tls {
          context-server {
            type = "server"
            protocol = "TLS"

            keystore {
              path = "./core/src/test/resources/certs/localhost.p12"
              type = "PKCS12"
              password = ""
            }
          }

          context-client {
            type = "client"
            protocol = "TLS"

            truststore {
              path = "./core/src/test/resources/certs/localhost.p12"
              type = "PKCS12"
              password = ""
            }
          }
        }
      }
    }
  }
}
