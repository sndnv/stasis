stasis {
  client {
    analysis {
      checksum = "sha256" # one of [crc32, md5, sha1, sha256]
      checksum = ${?STASIS_CLIENT_ANALYSIS_CHECKSUM}
    }

    api {
      type = "http" # one of [http]
      type = ${?STASIS_CLIENT_API_TYPE}

      http {
        interface = "localhost"
        interface = ${?STASIS_CLIENT_API_HTTP_INTERFACE}
        port = 29090
        port = ${?STASIS_CLIENT_API_HTTP_PORT}

        context {
          enabled = false
          enabled = ${?STASIS_CLIENT_API_HTTP_CONTEXT_ENABLED}

          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_CLIENT_API_HTTP_CONTEXT_PROTOCOL}

          keystore {
            path = ""
            path = ${?STASIS_CLIENT_API_HTTP_CONTEXT_KEYSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_CLIENT_API_HTTP_CONTEXT_KEYSTORE_TYPE}
            password = ""
            password = ${?STASIS_CLIENT_API_HTTP_CONTEXT_KEYSTORE_PASSWORD}
          }
        }
      }

      init {
        interface = "localhost"
        interface = ${?STASIS_CLIENT_API_INIT_INTERFACE}
        port = 29190
        port = ${?STASIS_CLIENT_API_INIT_PORT}

        context {
          enabled = false
          enabled = ${?STASIS_CLIENT_API_INIT_CONTEXT_ENABLED}

          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_CLIENT_API_INIT_CONTEXT_PROTOCOL}

          keystore {
            path = ""
            path = ${?STASIS_CLIENT_API_INIT_CONTEXT_KEYSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_CLIENT_API_INIT_CONTEXT_KEYSTORE_TYPE}
            password = ""
            password = ${?STASIS_CLIENT_API_INIT_CONTEXT_KEYSTORE_PASSWORD}
          }
        }
      }

      authentication {
        token-size = 16
        token-size = ${?STASIS_CLIENT_API_AUTHENTICATION_TOKEN_SIZE}
      }
    }

    compression {
      type = "deflate" # one of [deflate, gzip]
      type = ${?STASIS_CLIENT_COMPRESSION_TYPE}
    }

    ops {
      backup {
        rules-file = "client.rules"
        rules-file = ${?STASIS_CLIENT_OPS_BACKUP_RULES_FILE}
        max-chunk-size = 8K
        max-chunk-size = ${?STASIS_CLIENT_OPS_BACKUP_MAX_CHUNK_SIZE}
        max-part-size = 4G
        max-part-size = ${?STASIS_CLIENT_OPS_BACKUP_MAX_PART_SIZE}
      }

      scheduling {
        schedules-file = "client.schedules"
        schedules-file = ${?STASIS_CLIENT_OPS_SCHEDULING_SCHEDULES_FILE}
        min-delay = 30 seconds
        min-delay = ${?STASIS_CLIENT_OPS_SCHEDULING_MIN_DELAY}
        max-extra-delay = 5 minutes
        max-extra-delay = ${?STASIS_CLIENT_OPS_SCHEDULING_MAX_EXTRA_DELAY}
      }

      monitoring {
        interval = 1 minute
        interval = ${?STASIS_CLIENT_OPS_MONITORING_INTERVAL}
      }
    }

    secrets {
      # also set when performing initial client setup
      derivation {
        encryption { # config for deriving encryption secrets
          secret-size = 32
          secret-size = ${?STASIS_CLIENT_SECRETS_DERIVATION_ENCRYPTION_SECRET_SIZE}
          iterations = 150000
          iterations = ${?STASIS_CLIENT_SECRETS_DERIVATION_ENCRYPTION_ITERATIONS}
          salt-prefix = "changeme"
          salt-prefix = ${?STASIS_CLIENT_SECRETS_DERIVATION_ENCRYPTION_SALT_PREFIX}
        }

        authentication { # config for deriving authentication secrets
          secret-size = 16
          secret-size = ${?STASIS_CLIENT_SECRETS_DERIVATION_AUTHENTICATION_SECRET_SIZE}
          iterations = 150000
          iterations = ${?STASIS_CLIENT_SECRETS_DERIVATION_AUTHENTICATION_ITERATIONS}
          salt-prefix = "changeme"
          salt-prefix = ${?STASIS_CLIENT_SECRETS_DERIVATION_AUTHENTICATION_SALT_PREFIX}
        }
      }

      encryption {
        file { # config for file encryption secrets
          key-size = 16 # in bytes; one of [16, 24, 32]
          key-size = ${?STASIS_CLIENT_SECRETS_ENCRYPTION_FILE_KEY_SIZE}
        }

        metadata { # config for metadata encryption secrets
          key-size = 16 # in bytes; one of [16, 24, 32]
          key-size = ${?STASIS_CLIENT_SECRETS_ENCRYPTION_METADATA_KEY_SIZE}
        }

        device-secret { # config for device-secret encryption secrets
          key-size = 16 # in bytes; one of [16, 24, 32]
          key-size = ${?STASIS_CLIENT_SECRETS_ENCRYPTION_DEVICE_SECRET_KEY_SIZE}
        }
      }
    }

    server {
      authentication {
        token-endpoint = "http://localhost:9090/oauth/token"
        token-endpoint = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_TOKEN_ENDPOINT}
        client-id = "" # client's ID, as registered in identity provider
        client-id = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CLIENT_ID}
        client-secret = "" # client secret, as registered in identity provider
        client-secret = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CLIENT_SECRET}
        expiration-tolerance = 30 seconds
        expiration-tolerance = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_TOLERANCE}
        use-query-string = false
        use-query-string = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_USE_QUERY_STRING}

        scopes {
          api = null # set when performing initial client setup; leave as null if no scope is needed
          api = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_SCOPES_API}
          core = null # set when performing initial client setup; leave as null if no scope is needed
          core = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_SCOPES_CORE}
        }

        context {
          enabled = false
          enabled = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CONTEXT_ENABLED}
          type = "client"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CONTEXT_PROTOCOL}

          truststore {
            path = ""
            path = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CONTEXT_TRUSTSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CONTEXT_TRUSTSTORE_TYPE}
            password = ""
            password = ${?STASIS_CLIENT_SERVER_AUTHENTICATION_CONTEXT_TRUSTSTORE_PASSWORD}
          }
        }
      }

      api {
        url = "http://localhost:19090"
        url = ${?STASIS_CLIENT_SERVER_API_URL}
        user = null # set when performing initial client setup
        user = ${?STASIS_CLIENT_SERVER_API_USER}
        user-salt = null # set when performing initial client setup
        user-salt = ${?STASIS_CLIENT_SERVER_API_USER_SALT}
        device = null # set when performing initial client setup
        device = ${?STASIS_CLIENT_SERVER_API_DEVICE}

        request-buffer-size = 1000
        request-buffer-size = ${?STASIS_CLIENT_SERVER_API_REQUEST_BUFFER_SIZE}

        cache {
          initial-capacity = 10
          initial-capacity = ${?STASIS_CLIENT_SERVER_API_CACHE_INITIAL_CAPACITY}
          maximum-capacity = 1000
          maximum-capacity = ${?STASIS_CLIENT_SERVER_API_CACHE_MAXIMUM_CAPACITY}
          time-to-live = 90 seconds
          time-to-live = ${?STASIS_CLIENT_SERVER_API_CACHE_TIME_TO_LIVE}
          time-to-idle = 30 seconds
          time-to-idle = ${?STASIS_CLIENT_SERVER_API_CACHE_TIME_TO_IDLE}
        }

        context {
          enabled = false
          enabled = ${?STASIS_CLIENT_SERVER_API_CONTEXT_ENABLED}
          type = "client"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_CLIENT_SERVER_API_CONTEXT_PROTOCOL}

          truststore {
            path = ""
            path = ${?STASIS_CLIENT_SERVER_API_CONTEXT_TRUSTSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_CLIENT_SERVER_API_CONTEXT_TRUSTSTORE_TYPE}
            password = ""
            password = ${?STASIS_CLIENT_SERVER_API_CONTEXT_TRUSTSTORE_PASSWORD}
          }
        }
      }

      core {
        address = "http://localhost:19091"
        address = ${?STASIS_CLIENT_SERVER_CORE_ADDRESS}

        node-id = null # set when performing initial client setup
        node-id = ${?STASIS_CLIENT_SERVER_CORE_NODE_ID}

        request-buffer-size = 1000
        request-buffer-size = ${?STASIS_CLIENT_SERVER_CORE_REQUEST_BUFFER_SIZE}

        context {
          enabled = false
          enabled = ${?STASIS_CLIENT_SERVER_CORE_CONTEXT_ENABLED}
          type = "client"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_CLIENT_SERVER_CORE_CONTEXT_PROTOCOL}

          truststore {
            path = ""
            path = ${?STASIS_CLIENT_SERVER_CORE_CONTEXT_TRUSTSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_CLIENT_SERVER_CORE_CONTEXT_TRUSTSTORE_TYPE}
            password = ""
            password = ${?STASIS_CLIENT_SERVER_CORE_CONTEXT_TRUSTSTORE_PASSWORD}
          }
        }
      }
    }

    service {
      internal-query-timeout = 3 seconds
      internal-query-timeout = ${?STASIS_CLIENT_SERVICE_INTERNAL_QUERY_TIMEOUT}

      termination-delay = 250 millis
      termination-delay = ${?STASIS_CLIENT_SERVICE_TERMINATION_DELAY}

      parallelism = 4
      parallelism = ${?STASIS_CLIENT_SERVICE_PARALLELISM}
    }

    staging {
      store-directory = null # leave unset/null to use the default JVM temporary directory
      store-directory = ${?STASIS_CLIENT_STAGING_STORE_DIRECTORY}
      files {
        prefix = ""
        prefix = ${?STASIS_CLIENT_STAGING_FILES_PREFIX}
        suffix = ""
        suffix = ${?STASIS_CLIENT_STAGING_FILES_SUFFIX}
      }
    }
  }
}

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  http {
    server {
      server-header = ""
      server-header = ${?AKKA_HTTP_SERVER_HEADER}
    }
  }
}
