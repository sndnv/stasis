akka {
  loglevel = "INFO"
  loggers = ["akka.event.Logging$DefaultLogger"]
  logging-filter = "akka.event.DefaultLoggingFilter"

  test {
    timefactor = 5.0
  }
}

stasis {
  server {
    service {
      internal-query-timeout = 3 seconds

      api {
        interface = "localhost"
        port = 29999
        context {
          type = "server"
          protocol = "TLS"
          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      core {
        interface = "localhost"
        port = 39999
        context {
          type = "server"
          protocol = "TLS"
          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }
    }

    clients {
      core {
        context {
          enabled = true
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      authentication {
        context {
          enabled = true
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }
    }

    authenticators {
      users {
        issuer = "stasis-identity-test"
        audience = "stasis-server-test"
        jwks-endpoint = "http://localhost:29998/valid/jwks.json"
        refresh-interval = 90 minutes
        expiration-tolerance = 30 seconds
      }

      nodes {
        issuer = "stasis-identity-test"
        audience = "stasis-server-test"
        jwks-endpoint = "http://localhost:29998/valid/jwks.json"
        refresh-interval = 90 minutes
        expiration-tolerance = 30 seconds
      }

      instance {
        token-endpoint = "http://localhost:29998/oauth/token"
        client-id = "39f7263e-77dd-4019-afcc-3e05d623aca8"
        client-secret = "some-secret"
        expiration-tolerance = 30 seconds
      }
    }

    persistence {
      database {
        url = "jdbc:h2:mem:server-integration"
        driver = "org.h2.Driver"
        user = ""
        password = ""
        keep-alive-connection = true
      }

      reservations {
        expiration = 1 minute
      }

      users {
        salt-size = 8
      }

      nodes {
        caching-enabled = true
      }

      staging {
        enabled = false
        destaging-delay = 1 minute
        store {
          type = "memory"
          memory {
            max-size = 100M
            name = "test-memory-store"
          }
        }
      }
    }

    bootstrap {
      enabled = true
      config = "bootstrap-integration.conf"
    }
  }

  test {
    server {
      service {
        context {
          type = "server"
          protocol = "TLS"
          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      persistence {
        database {
          url = "jdbc:h2:mem:server-unit"
          driver = "org.h2.Driver"
          user = ""
          password = ""
          keep-alive-connection = true
        }

        reservations {
          expiration = 1 minute
        }

        users {
          salt-size = 8
        }

        nodes {
          caching-enabled = true
        }

        staging {
          enabled = false
          destaging-delay = 1 minute
          store {
            type = "memory"
            memory {
              max-size = 100M
              name = "test-memory-store"
            }
          }
        }
      }

      persistence-with-staging {
        database {
          url = "jdbc:h2:mem:server-unit"
          driver = "org.h2.Driver"
          user = ""
          password = ""
          keep-alive-connection = true
        }

        reservations {
          expiration = 1 minute
        }

        nodes {
          caching-enabled = true
        }

        staging {
          enabled = true
          destaging-delay = 1 minute
          store {
            type = "memory"
            memory {
              max-size = 100M
              name = "test-memory-store"
            }
          }
        }
      }

      bootstrap-enabled {
        enabled = true
        config = "bootstrap-unit.conf"
      }

      bootstrap-disabled {
        enabled = false
        config = "bootstrap-unit.conf"
      }
    }
  }
}
