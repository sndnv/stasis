akka {
  loglevel = "INFO"
  loggers = ["akka.event.Logging$DefaultLogger"]
  logging-filter = "akka.event.DefaultLoggingFilter"

  test {
    timefactor = 5.0
  }
}

stasis {
  server {
    service {
      internal-query-timeout = 3 seconds

      api {
        interface = "localhost"
        port = 28999
        context {
          type = "server"
          protocol = "TLS"
          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      core {
        interface = "localhost"
        port = 38999
        context {
          type = "server"
          protocol = "TLS"
          keystore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      bootstrap {
        enabled = true
        config = "bootstrap-integration.conf"
      }
    }

    clients {
      core {
        request-buffer-size = 100
        max-chunk-size = 8192

        context {
          enabled = true
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      authentication {
        context {
          enabled = true
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./core/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }
    }

    authenticators {
      users {
        issuer = "stasis-identity-test"
        audience = "stasis-server-test"
        jwks-endpoint = "http://localhost:28998/valid/jwks.json"
        refresh-interval = 90 minutes
        refresh-retry-interval = 3 seconds
        expiration-tolerance = 30 seconds
      }

      nodes {
        issuer = "stasis-identity-test"
        audience = "stasis-server-test"
        jwks-endpoint = "http://localhost:28998/valid/jwks.json"
        refresh-interval = 90 minutes
        refresh-retry-interval = 3 seconds
        expiration-tolerance = 30 seconds
      }

      instance {
        token-endpoint = "http://localhost:28998/oauth/token"
        client-id = "39f7263e-77dd-4019-afcc-3e05d623aca8"
        client-secret = "some-secret"
        expiration-tolerance = 30 seconds
      }
    }

    credentials-managers {
      identity {
        url = "http://localhost:28997"

        request-buffer-size = 1000

        management {
          user = "test-user"
          user-password = "test-password"
          scope = "manage:clients"
        }

        context {
          enabled = false
          type = "client"
          protocol = "TLS"

          truststore {
            path = ""
            type = "PKCS12"
            password = ""
          }
        }
      }
    }

    persistence {
      database {
        profile = "H2Profile"
        url = "jdbc:h2:mem:server-integration"
        driver = "org.h2.Driver"
        user = ""
        password = ""
        keep-alive-connection = true
      }

      reservations {
        expiration = 1 minute
      }

      users {
        salt-size = 8
      }

      nodes {
        caching-enabled = true
      }

      staging {
        enabled = false
        destaging-delay = 1 minute
        store {
          type = "memory"
          memory {
            max-size = 100M
            max-chunk-size = 8K
            name = "test-memory-store"
          }
        }
      }
    }

    bootstrap {
      api {
        enabled = true

        interface = ${stasis.server.service.api.interface}
        port = 48999

        context {
          type = ${stasis.server.service.api.context.type}
          protocol = ${stasis.server.service.api.context.protocol}

          keystore {
            path = ${stasis.server.service.api.context.keystore.path}
            type = ${stasis.server.service.api.context.keystore.type}
            password = ${stasis.server.service.api.context.keystore.password}
          }
        }
      }

      devices {
        code-size = 9
        code-expiration = 5 minutes

        secret-size = 24

        credentials-manager {
          identity {
            client {
              redirect-uri = "https://localhost:9999"
              token-expiration = 90 minutes
            }
          }
        }

        parameters {
          authentication {
            token-endpoint = ${stasis.server.authenticators.instance.token-endpoint}
            use-query-string = ${stasis.server.authenticators.instance.use-query-string}

            scopes {
              api = "urn:stasis:identity:audience:"${stasis.server.authenticators.users.audience}
              core = "urn:stasis:identity:audience:"${stasis.server.authenticators.nodes.audience}
            }

            context {
              enabled = ${stasis.server.clients.authentication.context.enabled}
              protocol = ${stasis.server.clients.authentication.context.protocol}
            }
          }

          server-api {
            url = "https://localhost:"${stasis.server.service.api.port}

            context {
              enabled = false
              protocol = ${stasis.server.service.api.context.protocol}
            }
          }

          server-core {
            address = "https://localhost:"${stasis.server.service.core.port}

            context {
              enabled = false
              protocol = ${stasis.server.service.core.context.protocol}
            }
          }

          secrets {
            derivation {
              encryption {
                secret-size = 32
                iterations = 150000
                salt-prefix = "changeme"
              }

              authentication {
                secret-size = 16
                iterations = 150000
                salt-prefix = "changeme"
              }
            }

            encryption {
              file {
                key-size = 16
              }

              metadata {
                key-size = 16
              }

              device-secret {
                key-size = 16
              }
            }
          }

          additional-config = "bootstrap-device-additional-config"
        }
      }
    }
  }
}
