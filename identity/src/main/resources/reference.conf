stasis {
  identity {
    realm = "identity"
    realm = ${?STASIS_IDENTITY_REALM}

    service {
      # timeout for internal service operations, unrelated to database or API calls
      internal-query-timeout = 3 seconds
      internal-query-timeout = ${?STASIS_IDENTITY_SERVICE_INTERNAL_QUERY_TIMEOUT}

      api {
        # interface on which the API endpoint will listen for requests
        interface = "localhost"
        interface = ${?STASIS_IDENTITY_SERVICE_API_INTERFACE}

        # port on which the API endpoint will listen for requests
        port = 9090
        port = ${?STASIS_IDENTITY_SERVICE_API_PORT}

        # API endpoint TLS configuration
        context {
          enabled = true
          enabled = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_ENABLED}
          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_PROTOCOL}
          keystore {
            path = ""
            path = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_TYPE}
            password = ""
            password = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_PASSWORD}
          }
        }
      }

      telemetry {
        metrics {
          # interface on which the metrics endpoint will listen for requests
          interface = "localhost"
          interface = ${?STASIS_IDENTITY_SERVICE_TELEMETRY_METRICS_INTERFACE}

          # port on which the metrics endpoint will listen for requests
          port = 9092
          port = ${?STASIS_IDENTITY_SERVICE_TELEMETRY_METRICS_PORT}

          context { // not supported by exporter
            enabled = false
            type = "server"
            protocol = "TLS"

            keystore {
              path = ""
              type = "PKCS12"
              password = ""
            }
          }
        }
      }
    }

    codes {
      # authorization code generation configuration
      authorization {
        # sets the size (number of alphanumeric characters) of each code
        size = 32
        size = ${?STASIS_IDENTITY_CODES_AUTHORIZATION_SIZE}

        # determines how long the codes remain valid
        expiration = 1 minute
        expiration = ${?STASIS_IDENTITY_CODES_AUTHORIZATION_EXPIRATION}
      }
    }

    tokens {
      # access token (JWT) generation and signing configuration
      access {
        # determines what value is set in the `iss` field of each token
        issuer = "stasis-identity"
        issuer = ${?STASIS_IDENTITY_TOKENS_ACCESS_ISSUER}

        # determines how long the access tokens remain valid
        expiration = 90 minutes
        expiration = ${?STASIS_IDENTITY_TOKENS_ACCESS_EXPIRATION}

        # token signing key configuration
        signature-key {
          # a signature key can be either `generated` on service start or `stored` locally and re-used;
          #
          # `generated` keys should be preferred for development purposes and `stored` keys for production;
          # using `generated` keys for production will provide a negative user experience as all tokens will
          # become invalid as soon as the new set of keys come in use (on service restart).
          type = "generated" # one of [generated, stored]
          type = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_TYPE}

          generated {
            type = "rsa" # one of [rsa, ec, secret]
            type = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_TYPE}

            rsa {
              id = "stasis-identity-rsa-0"
              id = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_RSA_ID}
              size = 3072 # in bits
              size = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_RSA_SIZE}
              algorithm = "RS256" # one of [RS256, RS384, RS512]
              algorithm = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_RSA_ALGORITHM}
            }

            ec {
              id = "stasis-identity-ec-0"
              id = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_EC_ID}
              algorithm = "ES256" # one of [ES256, ES384, ES512]
              algorithm = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_EC_ALGORITHM}
            }

            secret {
              id = "stasis-identity-oct-0"
              id = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_SECRET_ID}
              algorithm = "HS256" # one of [HS256, HS384, HS512]
              algorithm = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_SECRET_ALGORITHM}
            }
          }

          stored {
            # path to signing key file (in JSON format)
            path = ""
            path = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_STORED_PATH}

            # determines if the service should generate a new key and store it at the above path,
            # if the configured key is missing; if enabled, the above key generation config will
            # be used to create the new key
            generate-if-missing = true
            generate-if-missing = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_STORED_GENERATE_IF_MISSING}
          }
        }
      }

      # refresh token generation configuration
      refresh {
        # determines if refresh token are generated and provided with each access token (JWT)
        allowed = false
        allowed = ${?STASIS_IDENTITY_TOKENS_REFRESH_ALLOWED}

        # sets the size (number of alphanumeric characters) of each token
        size = 64
        size = ${?STASIS_IDENTITY_TOKENS_REFRESH_SIZE}

        # determines how long the refresh tokens remain valid
        expiration = 7 days
        expiration = ${?STASIS_IDENTITY_TOKENS_REFRESH_EXPIRATION}
      }
    }

    # Warning: Changing these values _after_ clients or resource owners have already been stored
    # in the database will make it impossible for them to authenticate/login!
    secrets {
      # configuration for hashing client secrets before they are stored in the database
      client {
        algorithm = "PBKDF2WithHmacSHA512"
        algorithm = ${?STASIS_IDENTITY_SECRETS_CLIENT_ALGORITHM}
        iterations = 100000
        iterations = ${?STASIS_IDENTITY_SECRETS_CLIENT_ITERATIONS}
        derived-key-size = 64 // in bytes
        derived-key-size = ${?STASIS_IDENTITY_SECRETS_CLIENT_DERIVED_KEY_SIZE}
        salt-size = 64 // in bytes
        salt-size = ${?STASIS_IDENTITY_SECRETS_CLIENT_SALT_SIZE}
        authentication-delay = 500ms
        authentication-delay = ${?STASIS_IDENTITY_SECRETS_CLIENT_AUTHENTICATION_DELAY}
      }

      # configuration for hashing resource owner passwords before they are stored in the database
      resource-owner {
        algorithm = "PBKDF2WithHmacSHA512"
        algorithm = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_ALGORITHM}
        iterations = 100000
        iterations = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_ITERATIONS}
        derived-key-size = 64 // in bytes
        derived-key-size = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_DERIVED_KEY_SIZE}
        salt-size = 64 // in bytes
        salt-size = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_SALT_SIZE}
        authentication-delay = 500ms
        authentication-delay = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_AUTHENTICATION_DELAY}
      }
    }

    authenticators {
      # authenticates requests sent to the API
      resource-owner {
        # determines which claim in the access token is used to identity the subject/user/resource-owner
        identity-claim = "sub"
        identity-claim = ${?STASIS_IDENTITY_AUTHENTICATORS_OWNER_IDENTITY_CLAIM}

        # determines how long an expired access token can still be considered valid;
        #
        # this helps with timing/clock issues where the client may think their token
        # is still valid but in realitly it has expired a few moments ago
        expiration-tolerance = 30 seconds
        expiration-tolerance = ${?STASIS_IDENTITY_AUTHENTICATORS_OWNER_TOLERANCE}
      }
    }

    persistence {
      # database conection configuration
      database {
        # one of [DB2Profile, DerbyProfile, H2Profile, HsqldbProfile, MySQLProfile,
        #         OracleProfile, PostgresProfile, SQLiteProfile , SQLServerProfile]
        profile = "H2Profile"
        profile = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_PROFILE}
        url = "jdbc:h2:mem:identity"
        url = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_URL}
        driver = "org.h2.Driver"
        driver = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_DRIVER}
        user = ""
        user = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_USER}
        password = ""
        password = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_PASSWORD}
        keep-alive-connection = true
        keep-alive-connection = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_KEEP_ALIVE_CONNECTION}
      }
    }

    bootstrap {
      # bootstrap modes:
      #   - off            - do not run bootstrap; start service normally (should be the default after the services are setup)
      #   - init           - run bootstrap and pause service (should be used on the first run only)
      #   - init-and-start - run bootstrap and start service (should only be used for testing/development)
      #   - drop           - drop all servide data (and tables) and pause service
      mode = off # one of [off, init, init-and-start, drop]
      mode = ${?STASIS_IDENTITY_BOOTSTRAP_MODE}

      # path to bootstrap config file
      config = ""
      config = ${?STASIS_IDENTITY_BOOTSTRAP_CONFIG}
    }
  }
}

pekko {
  loglevel = "DEBUG"
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"

  http {
    server {
      server-header = ""
      server-header = ${?PEKKO_HTTP_SERVER_HEADER}
    }

    cors {
      allowed-origins = "https://"${stasis.identity.service.api.interface}":"${stasis.identity.service.api.port}
      allowed-origins = ${?PEKKO_HTTP_CORS_ALLOWED_ORIGINS}

      allowed-methods = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"]
    }
  }
}
