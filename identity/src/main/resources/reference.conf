stasis {
  identity {
    realm = "identity"
    realm = ${?STASIS_IDENTITY_REALM}

    service {
      internal-query-timeout = 3 seconds
      internal-query-timeout = ${?STASIS_IDENTITY_SERVICE_INTERNAL_QUERY_TIMEOUT}

      api {
        interface = "localhost"
        interface = ${?STASIS_IDENTITY_SERVICE_API_INTERFACE}
        port = 9090
        port = ${?STASIS_IDENTITY_SERVICE_API_PORT}
        context {
          enabled = true
          enabled = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_ENABLED}
          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_PROTOCOL}
          keystore {
            path = ""
            path = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_TYPE}
            password = ""
            password = ${?STASIS_IDENTITY_SERVICE_API_CONTEXT_KEYSTORE_PASSWORD}
          }
        }
      }

      telemetry {
        metrics {
          interface = "localhost"
          interface = ${?STASIS_IDENTITY_SERVICE_TELEMETRY_METRICS_INTERFACE}
          port = 9092
          port = ${?STASIS_IDENTITY_SERVICE_TELEMETRY_METRICS_PORT}

          context { // not supported by exporter
            enabled = false
            type = "server"
            protocol = "TLS"

            keystore {
              path = ""
              type = "PKCS12"
              password = ""
            }
          }
        }
      }
    }

    codes {
      authorization {
        size = 32
        size = ${?STASIS_IDENTITY_CODES_AUTHORIZATION_SIZE}
        expiration = 1 minute
        expiration = ${?STASIS_IDENTITY_CODES_AUTHORIZATION_EXPIRATION}
      }
    }

    tokens {
      access {
        issuer = "stasis-identity"
        issuer = ${?STASIS_IDENTITY_TOKENS_ACCESS_ISSUER}
        expiration = 90 minutes
        expiration = ${?STASIS_IDENTITY_TOKENS_ACCESS_EXPIRATION}
        signature-key {
          type = "generated" # one of [generated, stored]
          type = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_TYPE}
          generated {
            type = "rsa" # one of [rsa, ec, secret]
            type = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_GENERATED_TYPE}
            rsa {
              id = "stasis-identity-rsa-0"
              size = 3072 # in bits
              algorithm = "RS256" # one of [RS256, RS384, RS512]
            }
            ec {
              id = "stasis-identity-ec-0"
              algorithm = "ES256" # one of [ES256, ES384, ES512]
            }
            secret {
              id = "stasis-identity-oct-0"
              algorithm = "HS256" # one of [HS256, HS384, HS512]
            }
          }
          stored {
            path = "" # path to JWK file
            path = ${?STASIS_IDENTITY_TOKENS_ACCESS_SIGNATURE_KEY_STORED_PATH}
          }
        }
      }

      refresh {
        allowed = false
        allowed = ${?STASIS_IDENTITY_TOKENS_REFRESH_ALLOWED}
        size = 64
        size = ${?STASIS_IDENTITY_TOKENS_REFRESH_SIZE}
        expiration = 7 days
        expiration = ${?STASIS_IDENTITY_TOKENS_REFRESH_EXPIRATION}
      }
    }

    secrets {
      client {
        algorithm = "PBKDF2WithHmacSHA512"
        algorithm = ${?STASIS_IDENTITY_SECRETS_CLIENT_ALGORITHM}
        iterations = 100000
        iterations = ${?STASIS_IDENTITY_SECRETS_CLIENT_ITERATIONS}
        derived-key-size = 64 // in bytes
        derived-key-size = ${?STASIS_IDENTITY_SECRETS_CLIENT_DERIVED_KEY_SIZE}
        salt-size = 64 // in bytes
        salt-size = ${?STASIS_IDENTITY_SECRETS_CLIENT_SALT_SIZE}
        authentication-delay = 500ms
        authentication-delay = ${?STASIS_IDENTITY_SECRETS_CLIENT_AUTHENTICATION_DELAY}
      }
      resource-owner {
        algorithm = "PBKDF2WithHmacSHA512"
        algorithm = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_ALGORITHM}
        iterations = 100000
        iterations = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_ITERATIONS}
        derived-key-size = 64 // in bytes
        derived-key-size = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_DERIVED_KEY_SIZE}
        salt-size = 64 // in bytes
        salt-size = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_SALT_SIZE}
        authentication-delay = 500ms
        authentication-delay = ${?STASIS_IDENTITY_SECRETS_RESOURCE_OWNER_AUTHENTICATION_DELAY}
      }
    }

    authenticators {
      resource-owner {
        identity-claim = "sub"
        identity-claim = ${?STASIS_IDENTITY_AUTHENTICATORS_OWNER_IDENTITY_CLAIM}
        expiration-tolerance = 30 seconds
        expiration-tolerance = ${?STASIS_IDENTITY_AUTHENTICATORS_OWNER_TOLERANCE}
      }
    }

    persistence {
      database {
        profile = "H2Profile"
        profile = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_PROFILE}
        url = "jdbc:h2:mem:identity"
        url = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_URL}
        driver = "org.h2.Driver"
        driver = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_DRIVER}
        user = ""
        user = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_USER}
        password = ""
        password = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_PASSWORD}
        keep-alive-connection = true
        keep-alive-connection = ${?STASIS_IDENTITY_PERSISTENCE_DATABASE_KEEP_ALIVE_CONNECTION}
      }
    }

    bootstrap {
      enabled = false
      enabled = ${?STASIS_IDENTITY_BOOTSTRAP_ENABLED}
      config = "" # bootstrap config file
      config = ${?STASIS_IDENTITY_BOOTSTRAP_CONFIG}
    }
  }
}

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  http {
    server {
      server-header = ""
      server-header = ${?AKKA_HTTP_SERVER_HEADER}
    }
  }
}

akka-http-cors {
  allowed-origins = "https://"${stasis.identity.service.api.interface}":"${stasis.identity.service.api.port}
  allowed-origins = ${?AKKA_HTTP_CORS_ALLOWED_ORIGINS}

  allowed-methods = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"]
}
