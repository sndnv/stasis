stasis {
  identity {
    service {
      interface = "localhost"
      interface = ${?IDENTITY_SERVICE_INTERFACE}
      port = 9090
      port = ${?IDENTITY_SERVICE_PORT}
      internal-query-timeout = 3 seconds
      internal-query-timeout = ${?IDENTITY_SERVICE_INTERNAL_QUERY_TIMEOUT}
    }

    codes {
      authorization {
        size = 32
        size = ${?IDENTITY_CODES_AUTHORIZATION_SIZE}
        expiration = 1 minute
        expiration = ${?IDENTITY_CODES_AUTHORIZATION_EXPIRATION}
      }
    }

    tokens {
      access {
        issuer = "stasis-identity"
        issuer = ${?IDENTITY_TOKENS_ACCESS_ISSUER}
        expiration = 90 minutes
        expiration = ${?IDENTITY_TOKENS_ACCESS_EXPIRATION}
        signature-key {
          type = "generated" # one of [generated, stored]
          generated {
            type = "rsa" # one of [rsa, ec, secret]
            rsa {
              id = "stasis-identity-rsa-0"
              size = 3072 # in bits
              algorithm = "RS256" # one of [RS256, RS384, RS512]
            }
            ec {
              id = "stasis-identity-ec-0"
              algorithm = "ES256" # one of [ES256, ES384, ES512]
            }
            secret {
              id = "stasis-identity-oct-0"
              algorithm = "HS256" # one of [HS256, HS384, HS512]
            }
          }
          stored {
            path = "" # path to JWK file
          }
        }
      }

      refresh {
        size = 64
        size = ${?IDENTITY_TOKENS_REFRESH_SIZE}
        expiration = 7 days
        expiration = ${?IDENTITY_TOKENS_REFRESH_EXPIRATION}
      }
    }

    secrets {
      client {
        algorithm = "PBKDF2WithHmacSHA512"
        iterations = 100000
        derived-key-size = 64 // in bytes
        salt-size = 64 // in bytes
        authentication-delay = 500ms
      }
      resource-owner {
        algorithm = "PBKDF2WithHmacSHA512"
        iterations = 100000
        derived-key-size = 64 // in bytes
        salt-size = 64 // in bytes
        authentication-delay = 500ms
      }
    }

    authenticators {
      resource-owner {
        expiration-tolerance = 30 seconds
        expiration-tolerance = ${?IDENTITY_AUTHENTICATORS_OWNER_TOLERANCE}
      }
    }

    persistence {
      database {
        url = "jdbc:h2:mem:identity"
        url = ${?IDENTITY_PERSISTENCE_DATABASE_URL}
        driver = "org.h2.Driver"
        driver = ${?IDENTITY_PERSISTENCE_DATABASE_DRIVER}
        user = ""
        user = ${?IDENTITY_PERSISTENCE_DATABASE_USER}
        password = ""
        password = ${?IDENTITY_PERSISTENCE_DATABASE_PASSWORD}
        keep-alive-connection = true
        keep-alive-connection = ${?IDENTITY_PERSISTENCE_KEEP_ALIVE_CONNECTION}
      }
    }

    bootstrap {
      enabled = false
      enabled = ${?IDENTITY_BOOTSTRAP_ENABLED}
      config = "" # bootstrap config file
      config = ${?IDENTITY_BOOTSTRAP_CONFIG}
    }
  }
}

akka {
  loglevel = "INFO"
  loglevel = ${?IDENTITY_LOGLEVEL}
}
